if (typeof browser === "undefined") {
    var browser = chrome;
}

let requests = [];

const removeRequestByID = id => {
    index = requests.findIndex(request => request.requestId == id);
    toDelete = requests[index];
    if (index != -1) {
        requests.splice(index, 1);
        return toDelete;
    }
}

const removeRequestByURL = url => {
    index = requests.findIndex(request => request.url == url);
    toDelete = requests[index];
    if (index != -1) {
        requests.splice(index, 1);
        return toDelete;
    }
}

const getRequest = id => {
    return requests.find(request => request.requestId == id);
}

browser.webRequest.onSendHeaders.addListener(function (details) {
    requests.push(details);
}, { urls: ["<all_urls>"] }, ['requestHeaders']);

browser.webRequest.onCompleted.addListener(function (details) {
    removeRequestByID(details.requestId);
}, { urls: ["<all_urls>"] });

browser.webRequest.onErrorOccurred.addListener(function (details) {
    removeRequestByID(details.requestId)
}, { urls: ["<all_urls>"] });

browser.downloads.onCreated.addListener(item => {
    console.log("Catched a download...")
    console.log(requests)
    if (item.state == "in_progress" && !item.finalUrl.startsWith('blob')) {
        const request = removeRequestByURL(item.finalUrl);
        if (!request) {
            return;
        }
        console.log(request);
        console.log(item);
        chrome.downloads.cancel(item.id);
        chrome.downloads.erase({ id: item.id });
        chrome.runtime.sendNativeMessage("com.github.ritzer", { "url": item.finalUrl, "headers": request.requestHeaders });
    }
});
